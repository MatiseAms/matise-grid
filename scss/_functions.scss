@import 'functions/index';

@function bp($bp) {
	$breakpoint: map-get($grid-breakpoints, $bp);
	@return $breakpoint;
}
@function grid($value) {
	$values: null;
	@if length($value) > 1 {
		@each $size in $value {
			$v: calc-grid($size);
			$values: $values #{$v};
		}
	} @else {
		$values: calc-grid($value);
	}
	@return $values;
}
@function -grid($value) {
	$values: null;
	@if length($value) > 1 {
		@each $size in $value {
			$v: calc-grid($size);
			$values: $values -#{$v};
		}
	} @else {
		$values: -#{calc-grid($value)};
	}
	@return $values;
}

@function calc-grid($v) {
	$value: (100/$grid-columns)*$v;
	//convert px to vw based on design file
	@if unit($v) == 'px' {
		$value: (strip-unit($v)*100)/strip-unit($grid-design-width);
	}
	//convert rem to vw based on design file
	@if unit($v) == 'rem' {
		$value: ((strip-unit($v)*$base-font-size)*100)/strip-unit(
				$grid-design-width
			);
	}
	@return unquote('#{$value}vw');
}

@function mq($min: 0,$max: 0) {
	@if $max > 0 {
		$mq: 'only screen and (min-width: #{$min}px) and (max-width: #{$max}px)';
		@return $mq;
	}
	@elseif $min > 0 {
		$mq: 'only screen and (min-width: #{$min}px)';
		@return $mq;
	}
}

@function grid-mq-min($columns,$width) {
	@if unit($columns) == 'rem' {
		@debug "please just use Grid units!"; //
		$one-column: $grid-design-width / $grid-columns; //
		$width: strip-unit((strip-unit($columns) * 16) / $one-column);
	}

	$minimum-screenwidth: ($width/ $columns) * $grid-columns;
	$result: 'only screen and (max-width: #{$minimum-screenwidth}px)';
	@return $result;
}

@function grid-mq-max($columns,$width) {
	@if unit($columns) == 'rem' {
		@debug "please just use Grid units!"; //
		$one-column: $grid-design-width / $grid-columns; //
		$width: strip-unit((strip-unit($columns) * 16) / $one-column);
	}

	$minimum-screenwidth: ($width/ $columns) * $grid-columns;
	$result: 'only screen and (min-width: #{$minimum-screenwidth}px)';
	@return $result;
}

// ----
// Sass (v3.4.13)
// Compass (v1.0.3)
// ----

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }
  
  @return $value * map-get($units, $unit);
}

